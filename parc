#!/bin/bash

if ( [ ! -f Vagrantfile ] || [ ! -d architectures ] ) ; then
  echo "Cant find Vagrantfile"
  echo "Change your cwd to your cloned puppet-architectures directory and then run ./parc"
  exit 1
fi

architecturedir='architectures'

showhelp () {
cat << EOF

Play in Puppet Playground.

This command manages the playground: Vagrantfile, modules/ and manifests/

Usage: parc <action> [argument]
parc status                  - Show status
parc list                    - List the architectures available for symlinking
parc install <architecture>  - Link the specified architecture

See README for more details.
EOF
}

SETCOLOR_NORMAL="echo -en \\033[0;39m"
SETCOLOR_TITLE="echo -en \\033[0;35m"
SETCOLOR_BOLD="echo -en \\033[0;1m"

echo_title () {
 echo
 $SETCOLOR_BOLD ; echo $1 ; $SETCOLOR_NORMAL
}

ask_confirm () {
cat << EOF
Going to relink another architecture.
Are you sure you want to continue (y/n)?
EOF

  read answer
  [ "x$answer" == "xy" ] || exit 3
}

list_architecture() {
  echo_title "Available architectures for $0 install"
  ls -1 $architecturedir
}

install_architecture() {
  if [ -d "$(pwd)/${1}" ]; then
    clean
    echo_title "Installing $1"
  else
    echo_title "Architecture not found"
    list_architecture
    exit 1
  fi 
  install_cmd="ln -sf"
#  install_cmd="cp -a"
  $install_cmd $1/manifests .
  $install_cmd $1/site .
  $install_cmd $1/hieradata .
  $install_cmd $1/README.md README.architecture.md
  $install_cmd $1/hiera-vagrant.yaml hiera-vagrant.yaml  
  $install_cmd $1/hiera.yaml hiera.yaml  
#  [ -f $1/Vagrantfile ] && $install_cmd $1/Vagrantfile Vagrantfile

  echo_title "Running librarian-puppet install"  
  librarian-puppet install
}

clean() {
  ask_confirm
  rm hieradata >/dev/null 2>&1
  rm site >/dev/null 2>&1
  rm manifests >/dev/null 2>&1
}

clean_librarian() {
  echo_title "Executing librarian-puppet clean"
  librarian-puppet clean
}

status() {
  echo_title "Modules status (puppet module list --modulepath=modules/) "
  puppet module list --modulepath=modules/

  echo_title "Current Vagrant directory"
  ls -l 
}

while [ $# -gt 0 ]; do
  case "$1" in
    list)
      action=$1
      shift
      ;;
    status)
      action=$1
      shift
      ;;
    install)
      action=$1
      architecture=$2
      shift 2
      ;;
    *)
      showhelp
      exit
      ;;
  esac
done

case $action in 
  list) list_architecture ;;
  install) install_architecture $architecturedir/$architecture ;;
  status) status ;;
  * ) showhelp ;;
esac

